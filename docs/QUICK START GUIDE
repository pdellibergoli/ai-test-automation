# 🚀 Quick Start Guide - AI Test Automation

Inizia a usare il framework in **5 minuti**.

## 📦 Step 1: Installazione Base

```bash
# Clone o naviga nella directory del progetto
cd aitestautomation

# Crea ambiente virtuale
python -m venv .venv

# Attiva ambiente
source .venv/bin/activate  # Mac/Linux
# oppure
.venv\Scripts\activate     # Windows

# 1. Installa dipendenze
pip install -r requirements.txt

# 2. Crea .env con API key
cp .env.example .env
echo "GOOGLE_API_KEY=your_key_here" >> .env

# 3. Avvia l'Editor Web
python web_editor.py

# 4. Usa l'Editor nel browser ([http://127.0.0.1:5000](http://127.0.0.1:5000))
#    - Verrà creato dati_test.xlsx se non esiste
#    - Aggiungi un test (o usa file di esempio caricandolo)
#    - Salva
#    - Clicca Avvia Test
Per Test Mobile (+ 10 minuti)
(Questa sezione rimane invariata).

🎨 Features Principali
(Aggiungere Web Editor)

✨ Unified runner

📝 Web Editor per gestione Test Case e avvio esecuzioni

🤖 AI-powered test execution

📊 Report HTML interattivi con screenshot

🎬 GIF animate dell'esecuzione

📱 Supporto mobile (Appium)

🌐 Supporto web (Browser-Use)

☁️ Cloud testing (LambdaTest)

🔧 Configurazione centralizzata (.env)

✅ Validazione file Excel

(Sezioni "In Development", "Future Ideas", "Metriche", "Contribuire", "Support", "License", "Credits" rimangono invariate).


---

## 4. `docs/Cheat Sheet` (Aggiornato)

```markdown
# 🚀 Cheat Sheet - AI Test Automation Framework

Riferimento rapido per comandi e operazioni comuni.

## 📦 Setup & Installation

```bash
# Crea/Attiva ambiente virtuale (.venv)
python -m venv .venv && source .venv/bin/activate # Mac/Linux
# python -m venv .venv && .venv\Scripts\activate # Windows

# Installa dipendenze
pip install -r requirements.txt

# Installa browser/driver necessari
playwright install chromium --with-deps
# npm install -g appium && appium driver install uiautomator2 # Per Mobile
⚙️ Configurazione
Bash

# Crea file .env da template
cp .env.example .env # Mac/Linux
# copy .env.example .env # Windows

# Modifica .env (aggiungi almeno GOOGLE_API_KEY)

# Test configurazione (opzionale)
python config_manager.py
📝 Gestione Test Case (Excel)
Opzione 1: Web Editor (Consigliato)
Bash

# Avvia l'editor web
python web_editor.py

# Apri [http://127.0.0.1:5000](http://127.0.0.1:5000) nel browser
# -> Seleziona, Carica, Modifica, Aggiungi, Elimina, Salva
Opzione 2: CLI Helper
Bash

# Valida file Excel
python excel_helper.py # Scegli opzione Validazione

# Crea file Excel di esempio
python excel_helper.py # Scegli opzione Crea Esempio
Opzione 3: Manuale
Modifica direttamente i file .xlsx con Excel/LibreOffice. Colonne richieste: TestID, Descrizione, Task, Active, Device ('web'/'mobile').

🎯 Esecuzione Test
Dal Web Editor
Avvia: python web_editor.py

Apri http://127.0.0.1:5000

Seleziona il file Excel.

Assicurati che i test desiderati siano Active=True.

Clicca il pulsante <i class="bi bi-play-fill"></i> Avvia Test.

Visualizza l'output nel modal.

Da Terminale
Bash

# Esegui test dal file di default (dati_test.xlsx)
python main_runner.py

# Esegui test da un file specifico
python main_runner.py --file nome_altro_file.xlsx
📊 Report
Bash

# I report vengono generati in: reports/unified/YYYYMMDD_HHMMSS/
# Si aprono automaticamente dopo l'esecuzione da terminale

# Accedi all'elenco dei report tramite l'Editor Web:
# 1. Avvia: python web_editor.py
# 2. Apri [http://127.0.0.1:5000](http://127.0.0.1:5000)
# 3. Clicca sul link "Vedi Report Esecuzioni"
# -> Da qui puoi Aprire o Eliminare i report passati.
📱 Mobile Testing (Setup)
Bash

# Avvia Appium server (terminale separato)
appium

# Lista/Avvia emulatori/simulatori
adb devices # Android
# emulator -avd Nome_AVD # Android
# xcrun simctl list devices # iOS
🌐 Web Testing (Setup)
Normalmente non serve setup aggiuntivo dopo playwright install chromium. Per vedere il browser, imposta BROWSER_HEADLESS=false nel .env.

🔍 Debugging
Bash

# Abilita log dettagliato nel .env
# DEBUG_MODE=true
# BROWSER_USE_LOGGING_LEVEL=DEBUG

# Esegui script con encoding UTF-8 (per Windows)
python -X utf8 web_editor.py
python -X utf8 main_runner.py --file ...

# Verifica dipendenze installate nell'ambiente attivo (.venv)
pip list
pip show pandas flask openpyxl browser-use Appium-Python-Client # ecc.
🤖 LLM Configuration (nel .env)
(Questa sezione rimane invariata).

🔧 Troubleshooting
(Questa sezione rimane invariata, aggiungendo magari controllo attivazione .venv).

🎨 Customization
(Questa sezione rimane invariata).

🔄 Git Workflow
(Questa sezione rimane invariata, ricordando di fare commit di web_editor.py, templates/*, vercel.json (se usato), *requirements.txt).

📈 Performance Tips
(Questa sezione rimane invariata).

🔐 Security Best Practices
(Questa sezione rimane invariata).

📚 Comandi Utili Python
(Questa sezione rimane invariata).

🧪 Testing Commands (via Web Editor)
Puoi facilmente eseguire test selettivi attivando/disattivando le righe nell'editor web prima di cliccare "Avvia Test".

💡 Quick Tips (Aggiornato)
Bash

# Comando più usato per l'editor
python web_editor.py

# Comando più usato per esecuzione diretta
python main_runner.py [--file ...]

# Ferma server/esecuzione
Ctrl+C

# Ricarica forzata pagina editor nel browser
Ctrl+Shift+R / Cmd+Shift+R

# Backup Excel prima di modifiche massive nell'editor
# (L'editor salva direttamente, fai backup manuale se necessario)
🆘 Help Commands
(Questa sezione rimane invariata).

Tip: Gestisci i tuoi test in modo visuale con python web_editor.py! 🔖

Made with ❤️ by Pasquale Delli Bergoli