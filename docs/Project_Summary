# 📋 Project Summary - AI Test Automation Framework

## 🎯 Overview

Framework unificato per test automation usando AI agents. Supporta sia test **mobile** (iOS/Android via Appium) che **web** (browser via Browser-Use) attraverso un'interfaccia unificata controllata da un singolo file Excel.

## 🏗️ Architettura

```
┌─────────────────────────────────────────────────────────────┐
│                     main_runner.py                          │
│              (Entry Point Principale)                       │
└────────────────────┬────────────────────────────────────────┘
                     │
                     ├──► Legge: dati_test.xlsx
                     ├──► Valida: config_manager.py
                     │
        ┌────────────┴────────────┐
        │                         │
        ▼                         ▼
┌───────────────┐         ┌───────────────┐
│ Device=mobile │         │  Device=web   │
└───────┬───────┘         └───────┬───────┘
        │                         │
        ▼                         ▼
┌─────────────────┐       ┌─────────────────┐
│MobileExecutor   │       │  WebExecutor    │
│                 │       │                 │
│ • Appium        │       │ • Browser-Use   │
│ • app_class.py  │       │ • Playwright    │
│ • LambdaTest    │       │ • Chromium      │
└─────────────────┘       └─────────────────┘
        │                         │
        └────────────┬────────────┘
                     │
                     ▼
        ┌────────────────────────┐
        │   HTMLReportGenerator  │
        │  (report_utils.py)     │
        └────────────────────────┘
```

## 📁 Struttura File

```
aitestautomation/
│
├── 🚀 CORE FILES (NUOVI)
│   ├── main_runner.py              # Entry point principale - USA QUESTO
│   ├── config_manager.py           # Gestione configurazione centralizzata
│   ├── excel_helper.py         # Tool per gestione file Excel
│   ├── dati_test.xlsx              # File Excel unificato (mobile + web)
│   ├── .env                        # Configurazione (DA CREARE, vedi .env.example)
│   └── .env.example                # Template configurazione
│
├── 📱 MOBILE TESTING
│   ├── tests/
│   │   └── mobile_test_executor.py # Executor per test mobile
│   ├── app_class.py                # Wrapper Appium
│   ├── app_use/                    # Package agent mobile
│   └── screen/mobile/              # Screenshot test mobile
│
├── 🌐 WEB TESTING
│   ├── tests/
│   │   └── web_test_executor.py    # Executor per test web
│   ├── system_prompt.txt           # System prompt custom (opzionale)
│   └── screen/web/                 # Screenshot test web
│
├── 🛠️ UTILITIES
│   ├── utilities/
│   │   ├── excel_utils.py          # Lettura file Excel
│   │   ├── report_utils.py         # Generazione report HTML
│   │   ├── set_capabilities.py     # Configurazione Appium
│   │   └── utils.py                # Utility generiche
│   └── browseruse_agent_data/      # Dati agent
│
├── 📊 REPORTS & OUTPUT
│   ├── reports/
│   │   └── unified/                # Report unificati (mobile + web)
│   │       └── YYYYMMDD_HHMMSS/
│   │           └── test_report_*.html
│   └── agent_history.gif           # GIF esecuzione agente
│
├── 📚 DOCUMENTATION
│   ├── README.md                   # Documentazione principale
│   ├── QUICK_START.md              # Guida rapida
│   └── docs/                       # Documentazione extra
│
├── ⚙️ CONFIGURATION
│   ├── .gitignore                  # File da escludere da Git
│   ├── requirements.txt            # Dipendenze Python
│   └── .vscode/                    # Configurazione VSCode
│
└── ⚠️ DEPRECATED (Compatibilità retroattiva)
    ├── tests/
    │   ├── mobile_AI_test.py       # Vecchio script mobile (non usare)
    │   └── web_AI_test.py          # Vecchio script web (non usare)
    └── dati_test_app.xlsx          # Vecchio Excel mobile (migrare)
```

## 🔑 File Chiave

### 1. main_runner.py
**Cosa fa**: Entry point principale che:
- Legge `dati_test.xlsx`
- Valida configurazione
- Instradrà test verso l'executor corretto (mobile o web)
- Genera report unificato

**Come usare**:
```bash
python main_runner.py
```

### 2. config_manager.py
**Cosa fa**: Gestisce tutte le configurazioni:
- Carica variabili da `.env`
- Valida configurazione
- Fornisce accesso type-safe alle impostazioni

**Come usare**:
```bash
# Test configurazione
python config_manager.py
```

### 3. excel_helper.py
**Cosa fa**: Tool interattivo per:
- Unire file Excel separati (web + mobile)
- Validare file Excel unificato
- Creare file di esempio

**Come usare**:
```bash
python excel_helper.py
# Segui menu interattivo
```

### 4. dati_test.xlsx
**Cosa contiene**: Tutti i test case con struttura:

**Colonne obbligatorie**:
- `TestID`: Identificatore univoco
- `Descrizione`: Descrizione test
- `Task`: Prompt per AI agent
- `Execution`: True/False per eseguire
- **`Device`**: "mobile" o "web" ← **IMPORTANTE**

**Colonne per mobile** (solo se Device=mobile):
- `Platform`, `DeviceName`, `UDID`, `AppPackage`, `AppActivity`, etc.

### 5. .env
**Cosa contiene**: Variabili di configurazione:
- API keys (Gemini, OpenAI, etc.)
- Credentials LambdaTest
- Configurazioni browser
- Logging settings

**Come creare**:
```bash
cp .env.example .env
# Poi modifica con il tuo editor
```

## 🔄 Flusso Esecuzione

```mermaid
graph TD
    A[User esegue: python main_runner.py] --> B[Load config_manager]
    B --> C[Valida .env]
    C --> D{Config OK?}
    D -->|No| E[Mostra errori, Exit]
    D -->|Yes| F[Leggi dati_test.xlsx]
    F --> G[Filtra: Execution=True]
    G --> H{Per ogni test}
    H --> I{Device=?}
    I -->|mobile| J[MobileTestExecutor]
    I -->|web| K[WebTestExecutor]
    J --> L[Esegui con Appium]
    K --> M[Esegui con Browser-Use]
    L --> N[Salva screenshot]
    M --> N
    N --> O[Aggiungi a report]
    O --> P{Altri test?}
    P -->|Si| H
    P -->|No| Q[Finalizza report HTML]
    Q --> R[Apri report nel browser]
```

## 🚀 Come Iniziare

### Setup Rapido (5 minuti)

```bash
# 1. Installa dipendenze
pip install -r requirements.txt

# 2. Crea .env con API key
echo "GOOGLE_API_KEY=your_key_here" > .env

# 3. Crea file Excel di esempio
python excel_helper.py
# Scegli opzione 3

# 4. Rinomina file
mv dati_test_sample.xlsx dati_test.xlsx

# 5. Esegui test
python main_runner.py
```

### Per Test Mobile (+ 10 minuti)

```bash
# 1. Installa Appium
npm install -g appium
appium driver install uiautomator2

# 2. Avvia Appium (terminale separato)
appium

# 3. Avvia emulator/device Android
# Android Studio > AVD Manager > Start

# 4. Aggiungi test mobile al Excel
# Colonna Device = "mobile"

# 5. Esegui
python main_runner.py
```

## 🎨 Features Principali

### ✅ Implementate

- ✨ Unified runner (mobile + web in un solo comando)
- 🤖 AI-powered test execution (Gemini, OpenAI, Ollama)
- 📊 Report HTML interattivi con screenshot
- 🎬 GIF animate dell'esecuzione
- 📱 Supporto mobile (Android + iOS via Appium)
- 🌐 Supporto web (Chromium via Browser-Use)
- ☁️ Cloud testing (LambdaTest)
- 🔧 Configurazione centralizzata (config_manager)
- 🔄 Tool migrazione Excel
- 📝 Documentazione completa

### 🚧 In Development

- ⚡ Esecuzione parallela test
- 📧 Notifiche email/Slack
- 🔗 Integrazione Jira/TestRail
- 📈 Dashboard analytics
- 🎥 Video recording esecuzione
- 🌍 Multi-language support

### 💡 Future Ideas

- 🧪 AI-generated test cases
- 🔍 Visual regression testing
- 🤖 Self-healing tests
- 📱 Cross-browser testing
- ☁️ Multi-cloud support

## 📊 Metriche

- **Test supportati**: Mobile (iOS/Android) + Web
- **LLM supportati**: Gemini, OpenAI, Anthropic, Ollama
- **Report format**: HTML interattivo
- **Cloud providers**: LambdaTest (più in arrivo)
- **Linguaggi**: Python 3.11+

## 🤝 Contribuire

### Per sviluppatori

```bash
# Clone repo
git clone https://github.com/your-org/aitestautomation.git

# Crea branch feature
git checkout -b feature/amazing-feature

# Commit changes
git commit -m "Add amazing feature"

# Push to branch
git push origin feature/amazing-feature

# Apri Pull Request
```

### Aree di contributo

- 🐛 Bug fixes
- ✨ Nuove features
- 📝 Documentazione
- 🧪 Test coverage
- 🌍 Traduzioni
- 💡 Ideas e feedback

## 📞 Support & Community

- 📧 **Email**: support@example.com
- 💬 **Discord**: [Join Server](https://discord.gg/your-server)
- 📖 **Docs**: [Full Documentation](./docs/)
- 🐛 **Issues**: [GitHub Issues](https://github.com/your-org/aitestautomation/issues)
- 💡 **Discussions**: [GitHub Discussions](https://github.com/your-org/aitestautomation/discussions)

## 📄 License

MIT License - vedi [LICENSE](./LICENSE) per dettagli

## 🙏 Credits & Thanks

- **Browser-Use Team**: Amazing web automation framework
- **Appium Team**: Mobile automation standard
- **Google Gemini**: Powerful AI capabilities
- **LambdaTest**: Cloud testing platform
- **Community Contributors**: Thank you all!

---

**Version**: 2.0.0  
**Last Updated**: 2024  
**Status**: 🟢 Active Development

Made with ❤️ by Pasquale Delli Bergoli