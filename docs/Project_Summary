# 📋 Project Summary - AI Test Automation Framework

Framework unificato per test automation usando AI agents. Supporta sia test **mobile** (iOS/Android via Appium) che **web** (browser via Browser-Use). La gestione dei test case avviene tramite file Excel, modificabili anche tramite un'**interfaccia web dedicata**.

## 🏗️ Architettura (Aggiornata)

┌─────────────────────────────────────────────────────────────┐ │ Web Editor (web_editor.py) │◀─┐ │ (Flask App @ localhost:5000) │ │ └────────────────────┬────────────────────────────────────────┘ │ │ │ ├─► Legge/Scrive: .xlsx (locali) │ Browser Utente ├─► Legge: reports/unified/ │ (per Modifica/Avvio) ├─► Avvia (subprocess): main_runner.py ───┘ │ ┌────────────────────▼────────────────────────────────────────┐ │ main_runner.py │ │ (Entry Point Esecuzione Test) │ └────────────────────┬────────────────────────────────────────┘ │ ├──► Legge: *.xlsx (specificato da arg o web editor) ├──► Valida: config_manager.py │ ┌────────────┴────────────┐ │ │ ▼ ▼ ┌───────────────┐ ┌───────────────┐ │ Device=mobile │ │ Device=web │ └───────┬───────┘ └───────┬───────┘ │ │ ▼ ▼ ┌─────────────────┐ ┌─────────────────┐ │MobileExecutor │ │ WebExecutor │ │(mobile_test_...)│ │(web_test_...) │ │ • Appium │ │ • Browser-Use │ │ • LambdaTest │ │ • ... │ └─────────────────┘ └─────────────────┘ │ │ └────────────┬────────────┘ │ ▼ ┌────────────────────────┐ │ HTMLReportGenerator │ │ (report_utils.py) │ └────────────────────────┘


## 📁 Struttura File (Aggiornata)

aitestautomation/ │ ├── 🚀 CORE FILES │ ├── main_runner.py # Entry point esecuzione test │ ├── web_editor.py # NUOVO: Entry point editor web │ ├── config_manager.py # Gestione configurazione .env │ ├── excel_helper.py # Tool CLI per Excel (alternativa a web editor) │ ├── dati_test.xlsx # File Excel di default │ ├── .env # Configurazione (DA CREARE) │ └── .env.example # Template configurazione │ ├── 📝 TEMPLATES (NUOVO) │ └── templates/ │ ├── index.html # Frontend editor web │ └── reports.html # Frontend lista report │ ├── 📱 MOBILE TESTING │ ├── tests/mobile_test_executor.py # Executor mobile │ ├── app_class.py # Wrapper Appium │ └── app_use/ # Package agent mobile │ ├── 🌐 WEB TESTING │ ├── tests/web_test_executor.py # Executor web │ └── system_prompt.txt # System prompt custom │ ├── 🛠️ UTILITIES │ ├── utilities/ │ │ ├── excel_utils.py # Lettura Excel │ │ ├── report_utils.py # Generazione report HTML │ │ ├── set_capabilities.py # Config Appium │ │ └── utils.py # Funzioni generiche │ └── browseruse_agent_data/ # Dati agent │ ├── 📊 REPORTS & OUTPUT │ ├── reports/unified/ # Report unificati (letti da web editor) │ ├── screen/mobile/ # Screenshot mobile │ ├── screen/web/ # Screenshot web │ └── agent_history.gif # GIF esecuzione agente │ ├── 📚 DOCUMENTATION │ ├── README.md # Documentazione principale │ ├── QUICK_START.md # Guida rapida │ └── docs/ # Documentazione extra │ ├── ⚙️ CONFIGURATION │ ├── .gitignore # File ignorati da Git │ ├── requirements.txt # Dipendenze Python │ └── .vscode/ # Config VSCode


## 🔑 File Chiave (Aggiornato)

### 1. main_runner.py
**Cosa fa**: Esegue i test da un file Excel specificato. Legge configurazione, instrada verso l'executor corretto, genera report. Può essere lanciato da terminale o dall'editor web.
**Come usare (Terminale)**:
```bash
python main_runner.py [--file nomefile.xlsx]
2. web_editor.py (NUOVO)
Cosa fa: Avvia un server web locale (Flask) che fornisce un'interfaccia per:

Visualizzare/Modificare/Aggiungere/Eliminare test nei file .xlsx.

Caricare nuovi file .xlsx.

Avviare l'esecuzione dei test (main_runner.py) per il file selezionato.

Visualizzare l'output dei test in tempo reale.

Accedere all'elenco dei report generati. Come usare:

Bash

python web_editor.py
# Apri [http://127.0.0.1:5000](http://127.0.0.1:5000) nel browser
3. config_manager.py
Cosa fa: Gestisce la configurazione caricata da .env (API keys, settings). Come usare:

Bash

# Test configurazione
python config_manager.py
4. excel_helper.py
Cosa fa: Tool da riga di comando per validare o creare file Excel di esempio. Utile se non si usa l'editor web. Come usare:

Bash

python excel_helper.py
# Segui menu interattivo
5. templates/ (NUOVO)
Cosa contiene: I file index.html (editor) e reports.html (lista report) usati da web_editor.py.

6. dati_test.xlsx (e altri .xlsx)
Cosa contiene: I test case con le colonne richieste (TestID, Descrizione, Task, Active, Device, ecc.). Modificabile manualmente o tramite l'editor web.

7. .env
Cosa contiene: Chiavi API e configurazioni sensibili. Da creare copiando .env.example.